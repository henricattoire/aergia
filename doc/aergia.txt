*aergia*  *aergia.txt*  snippet manager: v.1.2
                              __
_____    ____ _______   ____ |__|____
\__  \ _/ __ \\_  __ \ / ___\|  |__  \
 / __ \_  ___/_|  | \// /_/  \  |/ __ \_
(____  /\___  /|__|   \___  /|__|____  /
     \/     \/       /_____/         \/

Author:  Henri Cattoire

1. Introduction |aergia-introduction|
2. Requirements |aergia-requirements|
3. Variables    |aergia-variables|
4. Snippets     |aergia-snippets|
5. Completion   |aergia-completion|
6. Integration  |aergia-integration|

===============================================================================
INTRODUCTION                                              *aergia-introduction*

Did vim need another snippet manager? No. I made this plugin because the other
obvious options (UltiSnips, SnipMate) are far too dependent and feature rich,
in my opinion. Other, more minimal options, were either unmaintained or missed
one feature I really wanted to have.

===============================================================================
REQUIREMENTS                                              *aergia-requirements*

Vim 8.0 or higher is recommended, as this was the version used to develop and
test |aergia| (but |aergia| should work from version 7.01).

===============================================================================
VARIABLES                                                    *aergia-variables*

-------------------------------------------------------------------------------
                                                          *'g:aergia_snippets'*
Default: $HOME . '/.vim/snippets'

Location where |aergia| looks for snippets. Wrapped around |expand()| so that
special characters (like ~) and environment variables get expanded.
>
    let g:aergia_snippets = '/path'
<

-------------------------------------------------------------------------------
                                                             *'g:aergia_cache'*
Default: 1

Let |aergia| cache snippet files to reuse in the future.

-------------------------------------------------------------------------------
                                                           *'g:aergia_trigger'*
Default: '<c-a>'

Key used to trigger |aergia| into expanding snippets and jumping around in them.
>
    let g:aergia_trigger = '<c-j>'
<

-------------------------------------------------------------------------------
                                                            *'g:aergia_expand'*
Default: 0

Enables automatic expansion of snippets after completion when set to a truthy
value. See |aergia-completion|.

===============================================================================
SNIPPETS                                                      *aergia-snippets*

-------------------------------------------------------------------------------
                                                             *'snippet_format'*
Each filetype has its own json file where snippets get defined. The filename is
simply the filetype (or global) followed by the json extension. It is recommended
to write your snippets using literal tabs because this makes them more versatile.
>
    {
      "def": [
        "def <|name|>():"
        "\t''' <|name|>: <|+|> '''",
        "\t<|+|>"
      ],
      ...
    }
<

Each snippet is defined by a key. This key has one value; the body of the snippet.
The body of the snippet is just a list where each item is one line of the expanded
snippet (in order).
>
key: [
  line,
  ....
]
<

-------------------------------------------------------------------------------
                                                               *'snippet_tags'*
Points in snippets where you want to insert arbitrary text. In |aergia|, normal
tags just have a `+` between the start and the end of the tag.
>
    <|+|>
<

-------------------------------------------------------------------------------
                                                         *'snippet_named_tags'*
Named tags are tags that occur more than once in your snippet. When you have
set a value for one of these tags, |aergia| will automatically replace all other
tags with that name for you. Named tags are also default tags. So if you jump to
a named tag and then you jump again, the tag will be replaced with whatever
default (read: name) you gave the tag.
>
    <|name|>
<

-------------------------------------------------------------------------------
                                                       *'snippet_command_tags'*
Command tags are special because they get replaced by the return value of a
command (read: function). They get executed when you invoke a snippet, before
jumping to the first tag. Support for naming is limited, the name can only
consist of alphabetical characters.
>
    <|`command`|> or <|`command`=name|>
<
Example where a command tag is used to get the active filename.
>
    <|`expand("%:t")`|>
<

-------------------------------------------------------------------------------
                                               *'snippet_special_command_tags'*
Special command tags work just like command tags but their execution is delayed
until the tag with the given name was expanded. Every `@` in the command tag 
gets replaced by the expansion of the named tag.
>
    <|`command`:name|>
<
Example where a special command tag is used to get the extension of the value 
expanded by the `file` named tag.
>
    <|`fnamemodify('@', ':e')`:file|>
<
Note: if you want to include a literal `at sign` in the special command tag,
you need to escape it.

===============================================================================
COMPLETION                                                  *aergia-completion*

-------------------------------------------------------------------------------
                                                 *'aergia-completion-function'*
For snippet completion, |aergia| provides the bare minimum. It just has a
completion function and it is up to you how (or if) you want to use it.

Because this might be unknown territory for some people, here are some examples
on how to use the provided function.

Fitting the `vim` completion philosophy, you could create a distinct mapping to
trigger snippet completion.
>
    inoremap <c-x><c-a> <c-r>=aergia#complete#AergiaComplete()<cr>
<

You can also tap into completion plugins that have support for custom completion
functions, like MUcomplete.
>
    let g:mucomplete#user_mappings = {
          \ 'aergia' : "\<c-r>=aergia#complete#AergiaComplete()\<cr>", }
    let g:mucomplete#chains = {
          \ 'default' : [ 'aergia', 'path', 'omni', 'keyn', 'dict' ], }
<

-------------------------------------------------------------------------------
                                                              *'aergia-expand'*
When |'g:aergia_expand'| is enabled, |aergia| creates an autocommand that tries
to expand possible snippets upon |CompleteDone|. This option is obviously only
useful combined with the |'aergia-completion-function'|.

===============================================================================
INTEGRATION                                                *aergia-integration*

-------------------------------------------------------------------------------
                                                           *'is-aergia-useful'*
To integrate well with other plugins that use the same mapping in insert mode as
|aergia|, there is a function you can use to check if |aergia| can be useful.

Callable returns a boolean that indicates whether |aergia| is able to jump to a
tag or can expand the current key as a snippet.
>
    call aergia#Callable()
<

Use the tab key for both MUcomplete (with automatic completion) and |aergia|.
>
    imap <c-f> <plug>(MUcompleteFwd)
    imap <expr> <tab> pumvisible() ? "\<c-f>" :
          \ aergia#Callable() ? "\<c-a>" :  "\<tab>"
    smap <tab> <c-a>
<
